#!/usr/bin/env python3
"""
VCD Analysis Script for Cache Comparison

This script helps analyze VCD files generated by the cache comparison script.
It extracts key events and statistics from the waveform files to provide
insights into the different cache modes.
"""

import os
import re
import sys
import argparse
import subprocess
from pathlib import Path

def parse_args():
    """Parse command-line arguments"""
    parser = argparse.ArgumentParser(description="Analyze VCD files from cache simulations")
    parser.add_argument("vcd_file", type=str, help="Path to VCD file to analyze")
    parser.add_argument("--extract-events", action="store_true", 
                        help="Extract key events from the VCD file")
    parser.add_argument("--count-accesses", action="store_true",
                        help="Count cache accesses by set/way")
    parser.add_argument("--output", type=str, default="vcd_analysis_report.txt",
                        help="Output file for analysis results")
    return parser.parse_args()

def check_vcd_file(vcd_file):
    """Check if the VCD file exists and is valid"""
    if not os.path.exists(vcd_file):
        print(f"Error: VCD file {vcd_file} does not exist")
        return False
    
    # Check if the file is a valid VCD file
    with open(vcd_file, 'r') as f:
        first_line = f.readline().strip()
        if not first_line.startswith("$date") and not first_line.startswith("$version"):
            print(f"Warning: {vcd_file} may not be a valid VCD file")
            return False
    
    return True

def extract_signals(vcd_file):
    """Extract signal names from VCD file"""
    signals = []
    
    try:
        # Use grep to extract signal declarations
        cmd = f"grep -A1 '$var' {vcd_file} | grep -v '$var' | grep -v '\--' | head -n 500"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            signal_lines = result.stdout.splitlines()
            for line in signal_lines:
                if line.strip():
                    signals.append(line.strip())
        
        return signals[:100]  # Return first 100 signals
    except Exception as e:
        print(f"Error extracting signals: {e}")
        return []

def count_set_accesses(vcd_file):
    """
    Count cache set accesses by analyzing the VCD file
    This uses grep to search for specific patterns in the VCD file
    """
    set_accesses = {}
    
    # Patterns to look for
    patterns = [
        "wt_hybche_mem.wr_phys_idx",
        "wt_hybche_mem.rd_phys_idx",
        "wt_dcache_mem.wr_idx_i",
        "wt_dcache_mem.rd_idx_i"
    ]
    
    for pattern in patterns:
        try:
            # Use grep to find lines with the pattern
            cmd = f"grep -A2 '{pattern}' {vcd_file} | grep -v '{pattern}' | grep -v '\--' | head -n 1000"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0:
                lines = result.stdout.splitlines()
                
                # Count occurrences of each value
                for line in lines:
                    if line.strip() and re.search(r'[01]+', line.strip()):
                        # Try to extract binary value
                        match = re.search(r'([01]+)', line.strip())
                        if match:
                            binary = match.group(1)
                            # Convert binary to integer
                            try:
                                value = int(binary, 2)
                                if pattern not in set_accesses:
                                    set_accesses[pattern] = {}
                                if value not in set_accesses[pattern]:
                                    set_accesses[pattern][value] = 0
                                set_accesses[pattern][value] += 1
                            except:
                                pass
        except Exception as e:
            print(f"Error analyzing pattern {pattern}: {e}")
    
    return set_accesses

def extract_key_events(vcd_file):
    """Extract key events from the VCD file"""
    events = []
    
    # Key events to look for
    event_patterns = [
        ("Cache hit", "hit_oh"),
        ("Cache miss", "miss"),
        ("Write buffer hit", "wbuffer_hit"),
        ("Hash function", "wr_hash"),
        ("Tag match", "tag_match")
    ]
    
    for event_name, pattern in event_patterns:
        try:
            # Use grep to find occurrences of the pattern
            cmd = f"grep -n '{pattern}' {vcd_file} | head -n 50"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0:
                matches = result.stdout.splitlines()
                if matches:
                    events.append(f"Found {len(matches)} occurrences of {event_name} ({pattern})")
                    events.append(f"  First few occurrences at lines: {', '.join([m.split(':')[0] for m in matches[:5]])}")
        except Exception as e:
            print(f"Error extracting event {event_name}: {e}")
    
    return events

def analyze_vcd(vcd_file, args):
    """Analyze the VCD file and generate a report"""
    print(f"Analyzing VCD file: {vcd_file}")
    
    # Check if the file exists and is valid
    if not check_vcd_file(vcd_file):
        return
    
    # Get file size
    file_size = os.path.getsize(vcd_file) / (1024 * 1024)  # in MB
    
    # Extract key signals
    print("Extracting signals...")
    signals = extract_signals(vcd_file)
    
    # Extract events if requested
    events = []
    if args.extract_events:
        print("Extracting key events...")
        events = extract_key_events(vcd_file)
    
    # Count set accesses if requested
    set_accesses = {}
    if args.count_accesses:
        print("Counting cache accesses...")
        set_accesses = count_set_accesses(vcd_file)
    
    # Generate report
    report_file = args.output
    print(f"Generating report: {report_file}")
    
    with open(report_file, 'w') as f:
        f.write(f"VCD Analysis Report for {vcd_file}\n")
        f.write("="*80 + "\n\n")
        
        f.write(f"File Size: {file_size:.2f} MB\n\n")
        
        # Cache mode identification
        cache_mode = "Unknown"
        if "wt_hybche" in ''.join(signals):
            if "force_full" in ''.join(signals):
                cache_mode = "WT_HYB_FORCE_FULL_ASS"
            else:
                cache_mode = "WT_HYB_FORCE_SET_ASS"
        elif "wt_dcache" in ''.join(signals):
            cache_mode = "WT"
        
        f.write(f"Identified Cache Mode: {cache_mode}\n\n")
        
        # Signal summary
        f.write("Sample Signals:\n")
        for i, signal in enumerate(signals[:20]):
            f.write(f"{i+1}. {signal}\n")
        if len(signals) > 20:
            f.write(f"... and {len(signals)-20} more signals\n")
        f.write("\n")
        
        # Events
        if events:
            f.write("Key Events:\n")
            for event in events:
                f.write(f"{event}\n")
            f.write("\n")
        
        # Set accesses
        if set_accesses:
            f.write("Cache Set Accesses:\n")
            for pattern, accesses in set_accesses.items():
                f.write(f"\n{pattern}:\n")
                for set_idx, count in sorted(accesses.items()):
                    f.write(f"  Set {set_idx}: {count} accesses\n")
            f.write("\n")
        
        # ASCII histogram for set accesses
        if set_accesses:
            f.write("\nAccess Distribution ASCII Histogram:\n")
            for pattern, accesses in set_accesses.items():
                if accesses:
                    f.write(f"\n{pattern}:\n")
                    
                    # Find max count for normalization
                    max_count = max(accesses.values())
                    max_set = max(accesses.keys()) + 1
                    
                    # Draw histogram
                    f.write(f"+{'-' * max_set}+\n")
                    line = "|"
                    for s in range(max_set):
                        count = accesses.get(s, 0)
                        # Use # for present, space for absent
                        line += "#" if count > 0 else " "
                    line += "|"
                    f.write(f"{line}\n")
                    f.write(f"+{'-' * max_set}+\n")
                    
                    # Distribution percentages
                    total = sum(accesses.values())
                    for s in sorted(accesses.keys()):
                        count = accesses[s]
                        percent = (count / total) * 100
                        f.write(f"  Set {s}: {count} accesses ({percent:.2f}%)\n")
    
    print(f"Analysis complete. Report saved to {report_file}")

def main():
    args = parse_args()
    analyze_vcd(args.vcd_file, args)

if __name__ == "__main__":
    main()